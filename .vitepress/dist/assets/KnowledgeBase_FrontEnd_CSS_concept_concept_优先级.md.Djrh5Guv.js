import{_ as t,c as e,o as l,a3 as a}from"./chunks/framework.qnZckW2M.js";const S=JSON.parse('{"title":"优先级","description":"","frontmatter":{},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/CSS/concept/concept/优先级.md","filePath":"KnowledgeBase/FrontEnd/CSS/concept/concept/优先级.md","lastUpdated":1719733603000}'),i={name:"KnowledgeBase/FrontEnd/CSS/concept/concept/优先级.md"},o=a('<h1 id="优先级" tabindex="-1">优先级 <a class="header-anchor" href="#优先级" aria-label="Permalink to &quot;优先级&quot;">​</a></h1><p>浏览器通过<strong>优先级</strong>（也称为特殊性）来判断哪一些属性值与一个元素最为相关，从而在该元素上应用这些属性值。优先级是基于不同种类选择器组成的匹配规则。</p><h2 id="优先级顺序" tabindex="-1">优先级顺序 <a class="header-anchor" href="#优先级顺序" aria-label="Permalink to &quot;优先级顺序&quot;">​</a></h2><p>选择符优先级：</p><ol><li><code>!important</code></li><li>行内样式</li><li>ID 选择符</li><li>类选择符</li><li>标签选择符 | 伪类选择符 | 属性选择符</li><li>伪元素选择符</li><li>通配选择符 | 关系选择符 | 否定伪类</li></ol><br><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">权重值</th></tr></thead><tbody><tr><td style="text-align:left;">行内样式</td><td style="text-align:left;">[1,0,0,0] A</td></tr><tr><td style="text-align:left;">ID 选择符</td><td style="text-align:left;">[0,1,0,0] B</td></tr><tr><td style="text-align:left;">类选择符、伪类选择符和属性选择符</td><td style="text-align:left;">[0,0,1,0] C</td></tr><tr><td style="text-align:left;">标签选择符和伪类对象选择符</td><td style="text-align:left;">[0,0,0,1] D</td></tr><tr><td style="text-align:left;">通配符、关系选择符和否定选择符</td><td style="text-align:left;">[0,0,0,0] E</td></tr><tr><td style="text-align:left;">继承样式</td><td style="text-align:left;">无权重值</td></tr></tbody></table><h2 id="权重值比较规则" tabindex="-1">权重值比较规则 <a class="header-anchor" href="#权重值比较规则" aria-label="Permalink to &quot;权重值比较规则&quot;">​</a></h2><ul><li>CSS 优先级是根据由每种选择符类型构成的级连字符串计算而成的，它不是一个对应相应匹配表达式的权重值；</li><li><code>[1,0,0,0] &gt; [0,99,99,99]</code> 从左往右逐个等级比较，前一个等级相等才往后比较；</li><li>无论是行内样式、内联样式表和外链样式表，都是按照这个规则来进行比较。而不是简单的 <code>行内样式 &gt; 内联样式表 &gt; 外链样式表</code>。之所以有这样的错觉，是因为确实行间样式为第一等的权重，所以它的权重是最高的。而内联样式可能一般写在了外链样式引用了之后，所以覆盖掉了之前的；</li><li>当 CSS 选择器权重相同，则最后的声明的 CSS 选择器覆盖靠前的 CSS；</li><li>相同 CSS 表达式，在 DOM 结构中的距离是不会对元素优先级计算产生影响的。</li></ul><h2 id="important" tabindex="-1"><code>!important</code> <a class="header-anchor" href="#important" aria-label="Permalink to &quot;`!important`&quot;">​</a></h2><p>当在一个样式生命中使用 <code>!import</code> 规则时，此声明将覆盖任何其他声明。</p><p>注意：使用 <code>!important</code> 是一个坏习惯，应该尽量避免，因为这破坏了样式表中的固有的级联规则 使得调试找 BUG 变得更加困难了。当两条相互冲突的带有 <code>!important</code> 规则的声明被应用到相同的元素上时，拥有更大优先级的声明将会被采用。</p><p><strong>经验法则</strong>：</p><ul><li>一定要优先考虑使用样式规则的优先级来解决问题而不是 <code>!important</code></li><li>只有在需要覆盖全站或外链 CSS 的特定页面中使用 <code>!important</code></li><li>永远不要再全站范围的 CSS 上使用 <code>!import</code></li><li>永远不要在你的插件中使用 <code>!import</code></li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.im/post/5be3d07be51d457d4932b043" target="_blank" rel="noreferrer">📝 深入理解 CSS 选择器优先级</a></li><li><a href="https://css-tricks.com/specifics-on-css-specificity/" target="_blank" rel="noreferrer">📝 Specifics on CSS Specificity</a></li></ul>',16),r=[o];function d(n,c,s,p,h,f){return l(),e("div",null,r)}const m=t(i,[["render",d]]);export{S as __pageData,m as default};
