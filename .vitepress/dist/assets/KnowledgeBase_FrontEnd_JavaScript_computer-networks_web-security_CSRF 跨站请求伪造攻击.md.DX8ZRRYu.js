import{_ as i,c as s,o as e,a3 as a}from"./chunks/framework.qnZckW2M.js";const E=JSON.parse('{"title":"CSRF 跨站请求伪造攻击","description":"","frontmatter":{"nav":{"title":"计算机网络","order":8},"group":{"title":"Web 安全","order":4},"title":"CSRF 跨站请求伪造攻击","order":3},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/web-security/CSRF 跨站请求伪造攻击.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/web-security/CSRF 跨站请求伪造攻击.md","lastUpdated":1719744630000}'),t={name:"KnowledgeBase/FrontEnd/JavaScript/computer-networks/web-security/CSRF 跨站请求伪造攻击.md"},l=a(`<h1 id="csrf-跨站请求伪造攻击" tabindex="-1">CSRF 跨站请求伪造攻击 <a class="header-anchor" href="#csrf-跨站请求伪造攻击" aria-label="Permalink to &quot;CSRF 跨站请求伪造攻击&quot;">​</a></h1><p><strong>跨站请求伪造</strong>（Cross-site Request Forgery，简称 CSRF）是一种挟制用户在当前已登录的 Web 页面上执行非本意的操作的攻击方法。</p><p>CSRF 攻击的本质是利用 cookie 会在同源请求中携带发送给服务器的特点，以此来实现用户的冒充。</p><p>与 [XSS] 相比，XSS 利用的是用户对指定网站的信任，CSRF 利用的是网站对用户网页浏览器的信任。</p><h2 id="攻击手段" tabindex="-1">攻击手段 <a class="header-anchor" href="#攻击手段" aria-label="Permalink to &quot;攻击手段&quot;">​</a></h2><p>CSRF 漏洞即利用网站权限校验漏洞在用户不知觉情况下发送请求，达到 <strong>伪装</strong> 用户的目的。</p><p>典型的 CSRF 攻击有着如下的流程：</p><ol><li>受害者登录 <code>a.com</code>，并保留了登录凭证 Cookie</li><li>攻击者 <strong style="color:red;">引诱</strong> 受害者访问了 <code>b.com</code></li><li><code>b.com</code> 向 <code>a.com</code> 发送了一个请求：<code>a.com/act=xx</code>，浏览器会默认携带 <code>a.com</code> 的 Cookie</li><li><code>a.com</code> 接收到请求后，对请求进行验证，并确认是受害者的凭证，误以为是受害者自己发送的请求</li><li><code>a.com</code> 以受害者的名义执行了 <code>act=xxx</code></li><li>攻击完成，攻击者在受害者不知情的情况下，冒充受害者，让 <code>a.com</code> 执行了自己定义的操作</li></ol><p>攻击者利用 CSRF 实现的攻击主要方式：</p><ul><li>攻击者能够欺骗受害用户完成该受害者所允许的任一状态改变的操作 <ul><li>如：更新账号信息、完成购物、注销甚至登陆等操作</li></ul></li><li>获取用户的隐私数据</li><li>CSRF 蠕虫</li><li>配合其他漏洞攻击</li></ul><h3 id="get-类型" tabindex="-1">GET 类型 <a class="header-anchor" href="#get-类型" aria-label="Permalink to &quot;GET 类型&quot;">​</a></h3><p>在受害者访问含有这个 <code>img</code> 的页面后，浏览器会自动向 <code>http://bank.example/transfer?account=xiaoming&amp;amount=10000&amp;for=hacker</code> 发出一次 HTTP 请求。<code>bank.example</code> 就会收到包含受害者登录信息的一次跨域请求。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/transfer?amount=10000&amp;for=hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="post-类型" tabindex="-1">POST 类型 <a class="header-anchor" href="#post-类型" aria-label="Permalink to &quot;POST 类型&quot;">​</a></h3><p>这种类型的 CSRF 利用起来通常使用的是一个自动提交的表单，如：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://bank.example/transfer&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> method</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;POST&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;account&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;xiaoming&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;amount&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;10000&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hidden&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;for&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;hacker&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">form</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  document.forms[</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">submit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>访问该页面后，表单会自动提交，相当于模拟用户完成了一次 POST 操作。</p><p>POST 类型的攻击通常比 GET 要求更加严格一点，但仍并不复杂。任何个人网站、博客，被黑客上传页面的网站都有可能是发起攻击的来源，后端接口不能将安全寄托在仅允许 POST 上面。</p><h3 id="链接类型" tabindex="-1">链接类型 <a class="header-anchor" href="#链接类型" aria-label="Permalink to &quot;链接类型&quot;">​</a></h3><p>链接类型的 CSRF 并不常见，比起其他两种用户打开页面就中招的情况，这种 <strong style="color:red;">需要用户点击链接</strong> 才会触发。这种类型通常是在论坛中发布的图片中嵌入恶意链接，或者以广告的形式诱导用户中招，攻击者通常会以比较夸张的词语诱骗用户点击，例如：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://test.com/csrf/transfer.php?amount=1000&amp;for=hacker&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> taget</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_blank&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;重磅消息！！&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>由于之前用户登录了信任的网站，并且保存登录状态，只要用户主动访问上面的这个 PHP 页面，则表示攻击成功。</p><h2 id="攻击特点" tabindex="-1">攻击特点 <a class="header-anchor" href="#攻击特点" aria-label="Permalink to &quot;攻击特点&quot;">​</a></h2><ul><li>攻击 <strong>一般发起在第三方网站</strong>，而不是被攻击的网站，被攻击的网站无法防止攻击发生</li><li>攻击 <strong>利用受害者被攻击网站的登录凭证</strong>，冒充受害者提交操作，而不是直接窃取数据</li><li>整个过程攻击者并不能获取到受害者的登录凭证，仅仅是 <strong style="color:red;">冒用</strong></li><li>跨站请求可以用各种方式：图片 URL、超链接、CORS、Form 表单提交等等，部分请求方式可以直接嵌入在第三方论坛、文章中，难以进行追踪</li></ul><p>对于服务器返回的结果，由于浏览器 <strong>同源策略</strong> 的限制，黑客也无法进行解析。因此，黑客无法从返回的结果中得到任何东西，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。所以，我们要保护的对象是那些可以直接产生数据改变的服务，而对于读取数据的服务，则不需要进行 CSRF 的保护。比如银行系统中转账的请求会直接改变账户的金额，会遭到 CSRF 攻击，需要保护。而查询金额是对金额的读取操作，不会改变数据，CSRF 攻击无法解析服务器返回的结果，无需保护。</p><h2 id="防御策略" tabindex="-1">防御策略 <a class="header-anchor" href="#防御策略" aria-label="Permalink to &quot;防御策略&quot;">​</a></h2><p>CSRF 通常从第三方网站发起，被攻击网站无法防止攻击发生，只能通过增强自己网站针对 CSRF 的防护能力来提升安全性。</p><p>上文中讲了 CSRF 的两个特点：</p><ul><li>CSRF（通常）发生在第三方域名</li><li>CSRF 攻击者不能获取到 Cookie 等信息，只能冒用</li></ul><h3 id="防御思路" tabindex="-1">防御思路 <a class="header-anchor" href="#防御思路" aria-label="Permalink to &quot;防御思路&quot;">​</a></h3><p>防御思路：</p><ol><li>我们能不能 <strong style="color:red;">区分</strong> 一个请求是来自于自己的前端页面，还是第三方的网站？</li><li>怎么让自己的前端页面和伪造的请求变得 <strong style="color:red;">不一样</strong> 呢？</li></ol><p>针对 CSRF 的特点制定防护策略：</p><ul><li>阻止不明外域访问 <ul><li>同源检测机制：服务器通过请求头附带的 <code>Origin</code> 和 <code>Referer</code> 字段确定请求的来源域</li><li>Samesite Cookie</li></ul></li><li>提交时要求附加本域才能获取的信息 <ul><li>CSRF Token</li><li>双重 Cookie 验证</li></ul></li><li>保证网络请求由真实用户发出 <ul><li>用户操作限制（验证码）</li></ul></li></ul><h3 id="同源检测机制" tabindex="-1">同源检测机制 <a class="header-anchor" href="#同源检测机制" aria-label="Permalink to &quot;同源检测机制&quot;">​</a></h3><p>既然 CSRF 大多来自第三方网站，那么我们就直接禁止外域（或者不受信任的域名）对我们发起请求。</p><p>在 HTTP 协议中，每个一部请求都会携带两个 Header，用于标记来源域名：</p><ul><li>Origin Header</li><li>Referrer Header</li></ul><p>这两个 Header 在浏览器发起请求时，大多数情况会自动带上，并且不能由前端自定义内容。服务器可以通过解析这两个 Header 中的域名，确定请求的来源域。</p><h4 id="origin" tabindex="-1">Origin <a class="header-anchor" href="#origin" aria-label="Permalink to &quot;Origin&quot;">​</a></h4><p>使用 Origin Header 确定来源域名。</p><p>在部分与 CSRF 有关的请求中，请求的 Header 中会携带 Origin 字段。字段内包含请求的域名，不包含 <code>path</code> 及 <code>query</code> 部分。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Origin</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> http://foo.example</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果 Origin 存在，那么直接使用 Origin 中的字段确认来源域名就可以。</p><p>但是 Origin 在以下两种情况下并不存在：</p><ul><li>IE11 同源策略：IE11 不会在跨站 CORS 请求上添加 Origin 标头，Referrer 头仍然是唯一的标识。最根本原因是因为 IE11 对同源的定义和其他浏览器不同，有两个主要的区别，可以参考 <a href="https://link.juejin.im/?target=https%3A%2F%2Fdeveloper.mozilla.org%2Fen-US%2Fdocs%2FWeb%2FSecurity%2FSame-origin_policy%23IE_Exceptions" target="_blank" rel="noreferrer">MDN Same-origin_policy#IE_Exceptions</a></li><li>302 重定向：在 302 重定向之后 Origin 不包含在重定向的请求中，因为 Origin 可能会被认为是其他来源的敏感信息。对于 302 重定向的情况来说都是定向在新的服务器上的 URL，因此浏览器不想将 Origin 泄漏到新的服务器上。</li></ul><h4 id="referrer" tabindex="-1">Referrer <a class="header-anchor" href="#referrer" aria-label="Permalink to &quot;Referrer&quot;">​</a></h4><p>根据 HTTP 协议，在 HTTP 头中有一个字段叫 <code>referrer</code>，记录了该 HTTP 请求的来源地址。</p><ul><li>对于 Ajax 请求，图片和脚本文件等资源请求，<code>referrer</code> 为发起请求的页面地址。</li><li>对于页面跳转，<code>referrer</code> 为打开页面历史记录的前一页面地址。</li></ul><p>因此我们使用 Referrer 中链接的 Origin 部分可以得到 <strong>请求的来源域名</strong>。</p><p>这种方法并非万无一失，<code>referrer</code> 的值是由浏览器提供的，虽然 HTTP 协议上有明确的要求，但是每个浏览器对于 <code>referrer</code> 的具体实现可能有差别，并不能保证浏览器自身没有安全漏洞。使用验证 <code>referrer</code> 值的方法，就是把安全性都依赖于第三方（即浏览器）来保障，从理论上来讲，这样并不是很安全。在部分情况下，攻击者可以隐藏，甚至修改自己请求的 <code>referrer</code>。</p><p>新版 Referrer Policy 规定了五种 Referrer 策略：</p><ul><li>No Referrer：<code>no-referrer</code></li><li>No Referrer When Downgrade：<code>no-referrer-when-downgrade</code></li><li>Origin Only：<code>origin</code></li><li>Origin When Cross-orgin：<code>origin-when-crossorigin</code></li><li>Unsafe URL：<code>unsafe-url</code></li></ul><p><strong>使用 Referer Policy 的方式</strong></p><ol><li>CSP 响应头，通过 <code>referrer</code> 指令和五种可选的指令值，来指定 Referrer 策略</li></ol><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> referrer no-referrer | no-referrer-when-downgrade | origin | origin-when-cross-origin | unsafe-url;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="2"><li><code>&lt;meta&gt;</code> 元数据标签也可以指定 Referrer 策略</li></ol><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">&lt;!-- 在任何情况下，仅发送文件的源作为引用地址 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;referrer&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> content</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><ol start="3"><li>外链标签中的 <code>referrer</code> 属性</li></ol><p>或者用 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code>、<code>&lt;img&gt;</code>、<code>&lt;iframe&gt;</code>、<code>&lt;script&gt;</code> 或者 <code>&lt;link&gt;</code> 标签元素上的 <code>referrerpolicy</code> 属性为其设置独立的请求策略。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> referrerpolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;origin&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>另外也可以在 <code>&lt;a&gt;</code>、<code>&lt;area&gt;</code> 或者 <code>&lt;link&gt;</code> 元素上将 <code>rel</code> 属性设置为 <code>noreferrer</code>。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> href</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.com&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> referrer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;no-referrer|origin|unsafe-url&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;xxx&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">a</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>这种方式作用的只是这一个链接。并且，<code>&lt;a&gt;</code> 标签可用的 Referrer 策略只有三种：不传、只传 host 和都传。另外，这样针对单个链接设置的策略优先级比 CSP 和 <code>&lt;meta&gt;</code> 要高。</p><blockquote><p>当 Origin 和 Referrer 头文件不存在时该怎么办？如果 Origin 和 Referrer 都不存在，建议直接进行阻止，特别是如果您没有使用随机 CSRF Token 作为第二次检查。</p></blockquote><h3 id="cookie-的-samesite-属性" tabindex="-1">Cookie 的 SameSite 属性 <a class="header-anchor" href="#cookie-的-samesite-属性" aria-label="Permalink to &quot;Cookie 的 SameSite 属性&quot;">​</a></h3><p>Cookie 的 <code>SameSite</code> 属性能用于限制第三方 Cookie，从而减少安全风险。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Set-Cookie</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> CookieName=CookieValue; SameSite=Lax;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>可取值：</p><ul><li><code>Strict</code>：完全禁止第三方 Cookie，跨站点时，任何情况下都不会发送 Cookie。换言之，只有当前网页的 URL 与请求目标一致，才会带上 Cookie</li><li><code>Lax</code>：大多数情况不发送第三方 Cookie，但是导航到目标网站的 GET 请求除外（导航到目标网址的 GET 请求：链接、预加载请求和 GET 表单）</li><li><code>None</code></li></ul><h3 id="csrf-token" tabindex="-1">CSRF Token <a class="header-anchor" href="#csrf-token" aria-label="Permalink to &quot;CSRF Token&quot;">​</a></h3><p>前面讲到 CSRF 的另一个特征是，攻击者无法直接窃取到用户的信息（Cookie，Header，网站内容等），仅仅是冒用 Cookie 中的信息。而 CSRF 攻击之所以能够成功，是因为服务器误把攻击者发送的请求当成了用户自己的请求。那么我们可以要求所有的用户请求都携带一个 CSRF 攻击者无法获取到的 Token。服务器通过校验请求是否携带正确的 Token，来把正常的请求和攻击的请求区分开，也可以防范 CSRF 的攻击。</p><p>步骤：</p><ol><li>用户使用用户名密码登陆，服务端下发一个 <strong style="color:red;">随机的</strong> Token 字段，并且服务端把这个字段保存在 Session 中</li><li>客户端把这个 Token 保存起来，放到隐藏字段</li><li>用户在登录状态下，在之后访问的时候，都要携带这个 Token 字段</li><li>服务端从 Session 中拿出 Token 值进行对比，如果一致，说明请求合法</li><li>用户推出，Session 销毁，Token 失效</li></ol><p><strong>实现原理</strong></p><p>CSRF Token 的防护策略分为三个步骤：</p><ol><li>将 CSRF Token 输出到页面中</li></ol><p>首先，用户打开页面的时候，服务器需要给这个用户生成一个 Token，该 Token 通过加密算法对数据进行加密，一般 Token 都包括随机字符串和时间戳的组合，显然在提交时 Token 不能再放在 Cookie 中了，否则又会被攻击者冒用。因此，为了安全起见 Token 最好还是存在服务器的 Session 中，之后在每次页面加载时，使用 JS 遍历整个 DOM 树，对于 DOM 中所有的 <code>&lt;a&gt;</code> 和 <code>&lt;form&gt;</code> 标签后加入 Token。这样可以解决大部分的请求，但是对于在页面加载之后动态生成的 HTML 代码，这种方法就没有作用，还需要开发者在编码时手动添加 Token</p><ol start="2"><li>页面提交的请求携带这个 Token</li></ol><p>对于 GET 请求，Token 将附在请求地址之后，这样 URL 就变成 <code>http://url?csrftoken=tokenvalue</code>。 而对于 POST 请求来说，要在 <code>form</code> 的最后加上：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">input</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;”hidden”&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;”csrftoken”&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;”tokenvalue”&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ol start="3"><li>服务器验证 Token 是否正确</li></ol><p>当用户从客户端得到了 <code>token</code>，再次提交给服务器的时候，服务器需要判断 <code>token</code> 的有效性，验证过程是先解密 <code>token</code>，对比加密字符串以及时间戳，如果加密字符串一致且时间未过期，那么这个 Token 就是有效的。</p><p>这种方法要比之前检查 <code>referer</code> 或者 <code>origin</code> 要安全一些，<code>token</code> 可以在产生并放于 Session 之中，然后在每次请求时把 <code>token</code> 从 Session 中拿出，与请求中的 <code>token</code> 进行比对，但这种方法的比较麻烦的在于如何把 <code>token</code> 以参数的形式加入请求。</p><h3 id="分布式校验" tabindex="-1">分布式校验 <a class="header-anchor" href="#分布式校验" aria-label="Permalink to &quot;分布式校验&quot;">​</a></h3><p>在大型网站中，使用 Session 存储 CSRF Token 会带来很大的压力。访问单台服务器 session 是同一个。但是现在的大型网站中，我们的服务器通常不止一台，可能是几十台甚至几百台之多，甚至多个机房都可能在不同的省份，用户发起的 HTTP 请求通常要经过像 Ngnix 之类的负载均衡器之后，再路由到具体的服务器上，由于 Session 默认存储在单机服务器内存中，因此在分布式环境下同一个用户发送的多次 HTTP 请求可能会先后落到不同的服务器上，导致后面发起的 HTTP 请求无法拿到之前的 HTTP 请求存储在服务器中的 Session 数据，从而使得 Session 机制在分布式环境下失效，因此在分布式集群中 CSRF Token 需要存储在 Redis 之类的公共存储空间。</p><p>由于使用 Session 存储，读取和验证 CSRF Token 会引起比较大的复杂度和性能问题，目前很多网站采用 Encrypted Token Pattern 方式。这种方法的 Token 是一个计算出来的结果，而非随机生成的字符串。这样在校验时无需再去读取存储的 Token，只用再次计算一次即可。</p><p>这种 Token 的值通常是使用 UserID、时间戳和随机数，通过加密的方法生成。这样既可以保证分布式服务的 Token 一致，又能保证 Token 不容易被破解。</p><p>在 Token 解密成功之后，服务器可以访问解析值，Token 中包含的 UserID 和时间戳将会被拿来被验证有效性，将 UserID 与当前登录的 UserID 进行比较，并将时间戳与当前时间进行比较。</p><h3 id="双重-cookie-验证" tabindex="-1">双重 Cookie 验证 <a class="header-anchor" href="#双重-cookie-验证" aria-label="Permalink to &quot;双重 Cookie 验证&quot;">​</a></h3><p>指在请求借口时，除了常规带上 Cookie 中的用户凭证信息，如 <code>session_id</code> 外，还把 Cookie 中的用户凭证信息读出来附在接口请求参数重；这种方案对比 CSRF Token 方案来说，好在不需要生成额外得 Token，也同样能够起到防御 CSRF 攻击的效果。</p><p>流程：</p><ul><li>在用户访问网站页面时，向请求域名注入一个 Cookie，内容为随机字符串（例如 <code>csrfcookie=v8g9e4ksfhw</code>）；</li><li>在前端向后端发起请求时，取出 Cookie，并添加到 URL 的参数中（接上例 POST <a href="https://www.a.com/comment?csrfcookie=v8g9e4ksfhw%EF%BC%89%EF%BC%9B" target="_blank" rel="noreferrer">https://www.a.com/comment?csrfcookie=v8g9e4ksfhw）；</a></li><li>后端接口验证 Cookie 中的字段与 URL 参数中的字段是否一致，不一致则拒绝。</li></ul><p>此方法相对于 CSRF Token 就简单了许多。可以直接通过前后端拦截的的方法自动化实现。后端校验也更加方便，只需进行请求中字段的对比，而不需要再进行查询和存储 Token。</p><p>当然，此方法并没有大规模应用，其在大型网站上的安全性还是没有 CSRF Token 高，原因我们举例进行说明。</p><p>由于任何跨域都会导致前端无法获取 Cookie 中的字段（包括子域名之间），于是发生了如下情况：</p><ul><li>如果用户访问的网站为 <code>www.a.com</code>，而后端的 API 域名为 <code>api.a.com</code>。那么在 <code>www.a.com</code> 下，前端拿不到 <code>api.a.com</code> 的 Cookie，也就无法完成双重 Cookie 认证。</li><li>于是这个认证 Cookie 必须被种在 <code>a.com</code> 下，这样每个子域都可以访问。</li><li>任何一个子域都可以修改 <code>a.com</code> 下的 Cookie。</li><li>某个子域名存在漏洞被 XSS 攻击（例如 <code>upload.a.com</code>）。虽然这个子域下并没有什么值得窃取的信息。但攻击者修改了 <code>a.com</code> 下的 Cookie。</li><li>攻击者可以直接使用自己配置的 Cookie，对 XSS 中招的用户再向 <code>www.a.com</code> 下，发起 CSRF 攻击。</li></ul><h3 id="用户操作限制" tabindex="-1">用户操作限制 <a class="header-anchor" href="#用户操作限制" aria-label="Permalink to &quot;用户操作限制&quot;">​</a></h3><p>CSRF 攻击过程中，用户是在不知情的情况下构造了网络请求，因此添加验证码能强制用户必须与应用进行交互，服务器通过验证码来识别是不是用户主动发送的请求，由于一定强度的验证码机器无法识别，因此危险网站不能伪造一个完整的请求。</p><ul><li>优点：简洁有效，低成本</li><li>缺点：对用户不友好，无法给所有的操作都加上验证码</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.im/post/5bc009996fb9a05d0a055192" target="_blank" rel="noreferrer">📝 美团前端安全系列：如何防止 CSRF 攻击?</a></li><li><a href="https://juejin.im/entry/58802eb58fd9c50067dd746b" target="_blank" rel="noreferrer">📝 CSRF 攻击的应对之道</a></li><li><a href="https://juejin.im/entry/5b1e4575f265da6e2c19fd57" target="_blank" rel="noreferrer">📝 CSRF 漏洞详细说明</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/json_web_token-tutorial.html" target="_blank" rel="noreferrer">📝 JSON Web Token 入门教程</a></li></ul>`,102),n=[l];function r(o,p,h,k,d,c){return e(),s("div",null,n)}const u=i(t,[["render",r]]);export{E as __pageData,u as default};
