import{_ as s,c as e,o as i,a3 as a}from"./chunks/framework.qnZckW2M.js";const g=JSON.parse('{"title":"HTTP CSP 内容安全策略","description":"","frontmatter":{"nav":{"title":"计算机网络","order":8},"group":{"title":"HTTP","order":3},"title":"HTTP CSP 内容安全策略","order":16},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CSP 内容安全策略.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CSP 内容安全策略.md","lastUpdated":1719742520000}'),t={name:"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CSP 内容安全策略.md"},n=a(`<h1 id="http-csp-内容安全策略" tabindex="-1">HTTP CSP 内容安全策略 <a class="header-anchor" href="#http-csp-内容安全策略" aria-label="Permalink to &quot;HTTP CSP 内容安全策略&quot;">​</a></h1><p>内容安全策略 (CSP) 是一个额外的安全层，用于检测并削弱某些特定类型的攻击，包括跨站脚本 (XSS) 和数据注入攻击等。无论是数据盗取、网站内容污染还是散发恶意软件，这些攻击都是主要的手段。</p><p>CSP 是一种由开发者定义的安全性政策性申明，通过 CSP 所约束的规则指定可信的内容来源（这里的内容可以指脚本、图片、<code>iframe</code>、<code>font</code>、<code>style</code> 等等可能的远程的资源）。通过 CSP 协定，让 Web 处于一个安全的运行环境中。</p><p>为使 CSP 可用，需要配置网络服务器返回 <code>Content-Security-Policy</code> HTTP 头部。</p><p>除此之外，<code>&lt;meta&gt;</code> 元素也可以用于配置该策略：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> http-equiv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Content-Security-Policy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="指令选项" tabindex="-1">指令选项 <a class="header-anchor" href="#指令选项" aria-label="Permalink to &quot;指令选项&quot;">​</a></h2><h3 id="资源加载指令" tabindex="-1">资源加载指令 <a class="header-anchor" href="#资源加载指令" aria-label="Permalink to &quot;资源加载指令&quot;">​</a></h3><p>通过获取指令来控制某些可能被加载的确切的资源类型的位置：</p><p>CSP 策略在默认的情况下是不允许使用 <code>data URIs</code> 资源的，如果要使用，那么需要显示的指定：</p><ul><li><code>script-src</code>：在处理脚本资源的时候设置 <code>unsafe-inline</code> 可以阻止内联 Js 代码的执行，使用 <code>unsafe-eval</code> 开关可以禁止 <code>eval</code>、<code>setTimeout</code>、<code>setInterval</code> 函数的执行</li><li><code>style-src</code>：会控制样式表@import 和 rel 时所引入的 URI 资源，设置 unsafe-inline 规则可以是浏览器拒绝解析内部样式和内联样式定义。并不会阻止链入外部样式表。</li><li><code>img-src</code>：可以控制图片资源的连接，包括 <code>img</code> 标签的 <code>src</code> 属性，以及 CSS3 中的 <code>url()</code> 和 <code>image()</code> 方法，以及 <code>link</code> 标签中的 <code>href</code> 属性（当 <code>rel</code> 设置成与图像相关的值，比如 HTML 支持的 icon）</li><li><code>font-src</code>：控制 CSS 中的 <code>@font-face</code> 加载的字体源地址</li><li><code>frame-src</code>：设置允许通过类似 <code>&lt;frame&gt;</code> 和 <code>&lt;iframe&gt;</code> 标签加载的内嵌内容的源地址</li><li><code>manifest-src</code>：限制应用声明文件的源地址</li><li><code>media-src</code>：控制媒体类型的外部链入资源，如 <code>&lt;audio&gt;</code>、<code>&lt;video&gt;</code>、<code>&lt;source&gt;</code> 和 <code>&lt;track&gt;</code> 标签的 <code>src</code> 属性</li><li><code>object-src</code>：控制 <code>&lt;embed&gt;</code>、<code>&lt;code&gt;</code>、<code>&lt;archive&gt;</code>、<code>&lt;applet&gt;</code> 等对象</li><li><code>prefetch-src</code>：指定预加载或预渲染的允许源地址</li><li><code>connect-src</code>：控制 XMLHttpRequest 中的 <code>open()</code>、WebSocket、EventSource</li></ul><p>另外 <code>inline script</code> 和 <code>eval</code> 类型函数（包括 <code>eval</code>、<code>setInterval</code>、<code>setTimeout</code> 和 <code>new Function()</code>）也是不被执行的。</p><h3 id="default-src" tabindex="-1">default-src <a class="header-anchor" href="#default-src" aria-label="Permalink to &quot;default-src&quot;">​</a></h3><p><code>default-src</code> 用于设置上面各个选项的默认值。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default-src &#39;self&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码限制所有外部资源，只能从当前渔民该加载。</p><p>如果同时设置某个单项限制（比如 <code>font-src</code>）和 <code>default-src</code>，前者会覆盖后者，即字体文件会采用 <code>font-src</code> 的值，其他资源依然采用 <code>default-src</code> 的值。</p><h3 id="其他限制" tabindex="-1">其他限制 <a class="header-anchor" href="#其他限制" aria-label="Permalink to &quot;其他限制&quot;">​</a></h3><p>其他一些安全相关的功能，也放在了 CSP 里面：</p><ul><li><code>block-all-mixed-content</code>：HTTPS 网页不得加载 HTTP 资源（浏览器已经默认开启）</li><li><code>upgrade-insecure-requests</code>：自动将网页上所有加载外部资源的 HTTP 链接换成 HTTPS 协议</li><li><code>plugin-types</code>：限制可以使用的插件格式</li><li><code>sandbox</code>：浏览器行为的限制，比如不能有弹出窗口等。</li></ul><h3 id="report-uri" tabindex="-1">report-uri <a class="header-anchor" href="#report-uri" aria-label="Permalink to &quot;report-uri&quot;">​</a></h3><p>有时，我们不仅希望防止 XSS，还希望记录此类行为。<code>report-uri</code> 就用来告诉浏览器，应该把注入行为报告给哪个网址。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> default-src &#39;self&#39;; ...; report-uri /my_amazing_csp_report_parser;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>上面代码指定，将注入行为报告给 <code>/my_amazing_csp_report_parser</code> 这个 URL。</p><p>浏览器会使用 <code>POST</code> 方法，发送一个 <code>JSON</code> 对象，下面是一个例子。</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;csp-report&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;document-uri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://example.org/page.html&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;referrer&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://evil.example.com/&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;blocked-uri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://evil.example.com/evil.js&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;violated-directive&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script-src &#39;self&#39; https://apis.google.com&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;original-policy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;script-src &#39;self&#39; https://apis.google.com; report-uri http://example.org/my_amazing_csp_report_parser&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="选项值" tabindex="-1">选项值 <a class="header-anchor" href="#选项值" aria-label="Permalink to &quot;选项值&quot;">​</a></h2><p>每个限制选项可以设置以下几种值，这些值就构成了白名单。</p><ul><li><strong>主机名</strong>：<code>example.org</code>、<code>https://example.com:443</code></li><li><strong>路径名</strong>：<code>example.org/resources/js/</code></li><li><strong>通配符</strong>：<code>*.example.org</code>、<code>*://*.example.com:*</code>（表示任意协议、任意子域名、任意端口）</li><li><strong>协议名</strong>：<code>https:</code>、<code>data:</code></li><li><strong>关键字 <code>&#39;self&#39;</code></strong>：当前域名，需要加引号</li><li><strong>关键字 <code>&#39;none&#39;</code></strong>：禁止加载任何外部资源，需要加引号</li></ul><p>多个值也可以并列，用空格分隔。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script-src &#39;self&#39; https://apis.google.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>如果同一个限制选项使用多次，只有第一次会生效。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 错误的写法</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script-src https://host1.com; script-src https://host2.com</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 正确的写法</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script-src https://host1.com https://host2.com</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="script-src-的特殊值" tabindex="-1">script-src 的特殊值 <a class="header-anchor" href="#script-src-的特殊值" aria-label="Permalink to &quot;script-src 的特殊值&quot;">​</a></h2><p>除了常规值，<code>script-src</code> 还可以设置一些特殊值。注意，下面这些值都必须放在单引号里面。</p><ul><li><code>unsafe-inline</code>：允许执行页面内嵌的 <code>&amp;lt;script&gt;</code> 标签和事件监听函数</li><li><code>unsafe-eval</code>：允许将字符串当作代码执行，比如使用 <code>eval</code>、<code>setTimeout</code>、<code>setInterval</code> 和 <code>Function</code> 等函数。</li><li><code>nonce</code> 值：每次 HTTP 回应给出一个授权 token，页面内嵌脚本必须有这个 token，才会执行</li><li><code>hash</code> 值：列出允许执行的脚本代码的 Hash 值，页面内嵌脚本的哈希值只有吻合的情况下，才能执行。</li></ul><p><code>nonce</code> 值的例子如下，服务器发送网页的时候，告诉浏览器一个随机生成的 <code>token</code>。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script-src &#39;nonce-EDNnf03nceIOfn39fn3e9h3sdfa&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>页面内嵌脚本，必须有这个 token 才能执行。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> nonce</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;EDNnf03nceIOfn39fn3e9h3sdfa&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // some code</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><code>hash</code> 值的例子如下，服务器给出一个允许执行的代码的 <code>hash</code> 值。</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Content-Security-Policy</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> script-src &#39;sha256-qznLcsROx4GACP2dm0UCKCzCG-HiZ1guq6ZZDob_Tng=&#39;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>下面的代码就会允许执行，因为 hash 值相符。</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> type</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/javascript&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  alert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello, world.&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">script</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>注意，计算 <code>hash</code> 值的时候，<code>&lt;script&gt;</code> 标签不算在内。</p><p>除了 <code>script-src</code> 选项，<code>nonce</code> 值和 <code>hash</code> 值还可以用在 <code>style-src</code> 选项，控制页面内嵌的样式表。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">📖 内容安全策略（CSP）</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/09/csp.html" target="_blank" rel="noreferrer">📝 Content Security Policy 入门教程</a></li><li><a href="https://www.zhihu.com/question/21979782" target="_blank" rel="noreferrer">📝 Content Security Policy（CSP）是什么？为什么它能抵御 XSS 攻击？</a></li></ul>`,48),l=[n];function p(o,c,r,d,h,k){return i(),e("div",null,l)}const m=s(t,[["render",p]]);export{g as __pageData,m as default};
