import{_ as e,c as o,o as l,a3 as t}from"./chunks/framework.qnZckW2M.js";const T=JSON.parse('{"title":"HTTP CORS 跨域资源共享","description":"","frontmatter":{"nav":{"title":"计算机网络","order":8},"group":{"title":"HTTP","order":3},"title":"HTTP CORS 跨域资源共享","order":15},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CORS 跨域资源共享.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CORS 跨域资源共享.md","lastUpdated":1719744630000}'),a={name:"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP CORS 跨域资源共享.md"},r=t('<h1 id="http-cors-跨域资源共享" tabindex="-1">HTTP CORS 跨域资源共享 <a class="header-anchor" href="#http-cors-跨域资源共享" aria-label="Permalink to &quot;HTTP CORS 跨域资源共享&quot;">​</a></h1><p>跨域资源共享（CORS：Cross-Origin Resource Sharing）是一种机制，它使用额外的  HTTP 头来告诉浏览器，让运行在相同域（Origin）上的 Web 应用被准许访问来自不同源服务器上的指定的资源（也即是 [同源策略] 的 HTTP 解决方案）。当一个资源从与该资源本身所在的服务器<strong>不同的域、协议或端口</strong>请求一个资源时，资源会发起一个<strong>跨域 HTTP 请求</strong>。</p><p>CORS 机制是为了在认可用户发起的请求的同时，阻止恶意注入脚本；并在以下情况发起的 HTTP 请求时触发：</p><ul><li>不同的协议：比如从 <code>https://example.com</code> 调用 <code>http://example.com</code></li><li>不同的域：比如从 <code>example.com</code> 调用 <code>api.com</code></li><li>不同的子域：比如从 <code>example.com</code> 调用 <code>api.example.com</code></li><li>不同的端口：比如从 <code>example.com</code> 调用 <code>example.com:3001</code></li></ul><h2 id="实现条件" tabindex="-1">实现条件 <a class="header-anchor" href="#实现条件" aria-label="Permalink to &quot;实现条件&quot;">​</a></h2><p>浏览器将 CORS 请求分成两类：</p><ul><li>简单请求（simple request）</li><li>非简单请求（not-so-simple request）</li></ul><h3 id="简单请求" tabindex="-1">简单请求 <a class="header-anchor" href="#简单请求" aria-label="Permalink to &quot;简单请求&quot;">​</a></h3><p>只要满足以下条件，就属于简单请求：</p><ol><li>请求方法是以下三种方法之一 <ul><li><strong>HEAD</strong></li><li><strong>GET</strong></li><li><strong>POST</strong></li></ul></li><li>自定义设置集合外的头部字段 <ul><li><strong>Accept</strong> 告知服务端当前客户端可处理的内容类型</li><li><strong>Accept-Language</strong> 允许客户端声明它可以理解的自然语言，以及优先选择的区域方言</li><li><strong>Content-Language</strong> 说明访问者希望采用的的语言</li><li><strong>Content-Type</strong>（例如 <code>application/json</code> 为非简单请求）指示资源的 MIME 类型 <ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li><strong>DPR</strong></li><li><strong>Downlink</strong></li><li><strong>Save-Data</strong></li><li><strong>Viewport-Width</strong></li><li><strong>Width</strong></li><li><strong>Last-Event-ID</strong></li></ul></li><li>请求中的任意 XMLHttpRequestUpload 对象均没有注册任何事件监听器；XMLHttpRequestUpload 对象可以使用 <code>XMLHttpRequest.upload</code> 属性访问。</li><li>请求中没有 ReadableStream 对象。</li></ol><h3 id="非简单请求" tabindex="-1">非简单请求 <a class="header-anchor" href="#非简单请求" aria-label="Permalink to &quot;非简单请求&quot;">​</a></h3><p>除了简单请求这些限制外的都为非简单请求。</p><p>非简单请求需要满足使用以下任意方法的条件：</p><ul><li>PUT</li><li>DELETE</li><li>CONNECT</li><li>OPTIONS</li><li>TRACE</li><li>PATCH</li></ul><p>最常用于判断是否为简单和非简单请求的方法主要是通过 <strong>请求方法</strong> 和 <code>Content-Type</code> 头部字段的值。</p><h2 id="预请求-preflight" tabindex="-1">预请求 Preflight <a class="header-anchor" href="#预请求-preflight" aria-label="Permalink to &quot;预请求 Preflight&quot;">​</a></h2><p>预请求是 OPTIONS 请求，浏览器会自动添加 <code>Access-Control-Allow-Headers</code> 和 <code>Access-Control-Allow-Methods</code> 头部字段。</p><p>需要服务端返回的响应头 <code>Access-Control-Allow-Headers</code>、<code>Access-Control-Allow-Methods</code> 和 <code>Access-Control-Allow-Origin</code>。</p><p>除了 <code>Access-Control-Allow-Origin</code> 是必须的之外，其他两种只有在不符合简单请求需要的时候服务器才需要添加，比如在简单请求的基础上自定义了一个请求头 <code>X-xx-name: chris</code>，那么服务器只需要在响应头中添加 <code>Access-Control-Allow-Headers</code>。</p><p>每种响应头都可以使用 <code>*</code> 通配符来表示所有。</p><h3 id="减少预请求次数" tabindex="-1">减少预请求次数 <a class="header-anchor" href="#减少预请求次数" aria-label="Permalink to &quot;减少预请求次数&quot;">​</a></h3><p>可以通过设置 <code>Access-Control-Max-Age</code> 来减少预请求的次数，需要包含在预请求的响应头中，指定在该时间内预请求验证有效，不必每次都进行预请求，它的单位是 <code>s</code>。如 <code>Access-Control-Max-Age: 1728000</code>，即有效期为 20 天。</p><h2 id="正常请求" tabindex="-1">正常请求 <a class="header-anchor" href="#正常请求" aria-label="Permalink to &quot;正常请求&quot;">​</a></h2><p>预请求完之后就可以发送正常请求了，正常请求的步骤与简单请求一致，也需要添加 <code>Access-Control-Allow-Origin</code> 响应头。</p><h2 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h2><p>跨域资源共享标准（Cross-Origin Sharing Standard）允许在下列场景中使用跨域 HTTP 请求：</p><ul><li>前文提到的由 XMLHttpRequest 或 Fetch 发起的跨域 HTTP 请求</li><li>Web 字体（CSS 通过 <code>@font-face</code> 使用跨域字体资源）</li><li>WebGL 贴图</li><li>使用 <code>drawImage</code> 将 <code>Images/viedo</code> 画面绘制到 Canvas</li><li>样式表（使用 CSSOM ）</li></ul><blockquote><p>⚠️ 注意：HTML 中 <code>&lt;link&gt;</code>、<code>&lt;script&gt;</code>、<code>&lt;img&gt;</code> 等标签自带连接属性进行 HTTP 请求是能够无视同源策略的。</p></blockquote><h2 id="ios-wkwebview-需要-cors" tabindex="-1">iOS WKWebview 需要 CORS <a class="header-anchor" href="#ios-wkwebview-需要-cors" aria-label="Permalink to &quot;iOS WKWebview 需要 CORS&quot;">​</a></h2><p>如果您正在开发使用 Webview（使用 Cordova 或 Ionic）的移动应用程序，Android 将不会给您带来任何麻烦，但 iOS 上的新 WKWebview 将需要 CORS。这意味着您几乎必须始终将 <code>Access-Control-Allow-Origin</code> 标头设置为 <code>*</code> ，但实际上这并不理想。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="noreferrer">📖 MDN HTTP Access control CORS</a></li><li><a href="https://juejin.im/post/5a97b5a3f265da23766ab19a" target="_blank" rel="noreferrer">📝 理解 CORS</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="noreferrer">📝 阮一峰 跨域资源共享 CORS 详解</a></li><li><a href="https://juejin.im/post/58f816198d6d81005874fd97" target="_blank" rel="noreferrer">📝 由同源策略到前端跨域</a></li></ul>',32),i=[r];function c(d,n,s,p,h,g){return l(),o("div",null,i)}const m=e(a,[["render",c]]);export{T as __pageData,m as default};
