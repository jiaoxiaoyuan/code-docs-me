import{_ as t,c as e,o as l,a3 as s}from"./chunks/framework.qnZckW2M.js";const f=JSON.parse('{"title":"选择符","description":"","frontmatter":{"nav":{"title":"基础","order":1},"group":{"title":"概念","order":1},"title":"选择符","order":1},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/CSS/concept/concept/选择符.md","filePath":"KnowledgeBase/FrontEnd/CSS/concept/concept/选择符.md","lastUpdated":1719733603000}'),a={name:"KnowledgeBase/FrontEnd/CSS/concept/concept/选择符.md"},d=s(`<h1 id="选择符" tabindex="-1">选择符 <a class="header-anchor" href="#选择符" aria-label="Permalink to &quot;选择符&quot;">​</a></h1><p>选择符分为五类：</p><ul><li>元素选择符 Element Selectors</li><li>关系选择符 Relationship Selectors</li><li>属性选择符 Attribute Selectors</li><li>伪类选择符 Pseudo-Classes Selectors</li><li>伪元素选择符 Pseudo-Element Selectors</li></ul><h2 id="元素选择符" tabindex="-1">元素选择符 <a class="header-anchor" href="#元素选择符" aria-label="Permalink to &quot;元素选择符&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">选择符名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>*</code></td><td style="text-align:left;">通配选择符</td><td style="text-align:left;">所有元素对象</td></tr><tr><td style="text-align:left;"><code>E</code></td><td style="text-align:left;">类型选择符</td><td style="text-align:left;">以文档语言对象类型作为选择符</td></tr><tr><td style="text-align:left;"><code>E#id</code></td><td style="text-align:left;">ID 选择符</td><td style="text-align:left;">以唯一标识符 ID 属性的 E 元素作为选择符</td></tr><tr><td style="text-align:left;"><code>E.class</code></td><td style="text-align:left;">类选择符</td><td style="text-align:left;">以 <code>class</code> 属性的 E 元素作为选择符</td></tr></tbody></table><h2 id="关系选择符" tabindex="-1">关系选择符 <a class="header-anchor" href="#关系选择符" aria-label="Permalink to &quot;关系选择符&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">选择符名称</th><th style="text-align:left;">描述</th><th style="text-align:left;">CSS3</th></tr></thead><tbody><tr><td style="text-align:left;"><code>E F</code></td><td style="text-align:left;">包含选择符</td><td style="text-align:left;">选择所有被 E 元素包含的 F 元素（能命中所有后代元素）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E&gt;F</code></td><td style="text-align:left;">子选择符</td><td style="text-align:left;">选择所有作为 E 元素的子元素 F（只能命中子元素）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E+F</code></td><td style="text-align:left;">相邻选择符</td><td style="text-align:left;">选择紧贴在 E 元素之后 F 元素</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E~F</code></td><td style="text-align:left;">兄弟选择符</td><td style="text-align:left;">选择 E 元素所有兄弟元素 F</td><td style="text-align:left;">✅</td></tr></tbody></table><h2 id="属性选择符" tabindex="-1">属性选择符 <a class="header-anchor" href="#属性选择符" aria-label="Permalink to &quot;属性选择符&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">描述</th><th style="text-align:left;">CSS3</th></tr></thead><tbody><tr><td style="text-align:left;"><code>E[att]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性的 E 元素。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E[att=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值等于 <code>val</code> 的 E 元素。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E[att~=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值为一用空格分隔的字词列表，其中一个等于 <code>val</code> 的 E 元素。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E[att^=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值为以 <code>val</code> 开头的字符串的 E 元素。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E[att$=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值为以 <code>val</code> 结尾的字符串的 E 元素。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E[att*=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值为包含 <code>val</code> 的字符串的 E 元素。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E[att|=&#39;val&#39;]</code></td><td style="text-align:left;">选择具有 <code>att</code> 属性且属性值为以 <code>val</code> 开头并用连接符 <code>-</code> 分隔的字符串的 E 元素，如果属性值仅为 <code>val</code>，也将被选择。</td><td style="text-align:left;"></td></tr></tbody></table><br><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">.div</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  /* 表示存在 class 属性并且以 title 开头的元素 */</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">^=&#39;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">title</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&#39;] {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    margin-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="伪类选择符" tabindex="-1">伪类选择符 <a class="header-anchor" href="#伪类选择符" aria-label="Permalink to &quot;伪类选择符&quot;">​</a></h2><p>伪类就是一个选择处于特定状态的元素的选择器，比如某个 <code>className</code> 的第一个元素，某个被 <code>hover</code> 的元素等等。我们可以理解成一个特定的 CSS 类，但与普通的类不一样，它只有处于 DOM 树无法描述的状态下才能为元素添加样式，所以将其称为 <strong>伪类</strong>。</p><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">描述</th><th style="text-align:left;">CSS3</th></tr></thead><tbody><tr><td style="text-align:left;"><code>E:link</code></td><td style="text-align:left;">设置超链接 <code>&lt;a&gt;</code> 在未被访问前的样式。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:visited</code></td><td style="text-align:left;">设置超链接 <code>&lt;a&gt;</code> 在其链接地址已被访问过时的样式。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:hover</code></td><td style="text-align:left;">设置元素在其鼠标悬停时的样式。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:active</code></td><td style="text-align:left;">设置元素在被用户激活（在鼠标点击与释放之间发生的事件）时的样式。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:focus</code></td><td style="text-align:left;">设置元素在成为输入焦点（该元素的 <code>onfocus</code> 事件发生）时的样式。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:lang(fr)</code></td><td style="text-align:left;">匹配使用特殊语言的 E 元素。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:not(s)</code></td><td style="text-align:left;">匹配不含有 s 选择符的元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:root</code></td><td style="text-align:left;">匹配 E 元素在文档的根元素。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:first-child</code></td><td style="text-align:left;">匹配父元素的第一个子元素 E。</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"><code>E:last-child</code></td><td style="text-align:left;">匹配父元素的最后一个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:only-child</code></td><td style="text-align:left;">匹配父元素仅有的一个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:nth-child(n)</code></td><td style="text-align:left;">匹配父元素的第 n 个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:nth-last-child(n)</code></td><td style="text-align:left;">匹配父元素的倒数第 n 个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:first-of-type</code></td><td style="text-align:left;">匹配父元素下第一个类型为 E 的子元素。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:last-of-type</code></td><td style="text-align:left;">匹配父元素下的所有 E 子元素中的倒数第一个。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:only-of-type</code></td><td style="text-align:left;">匹配父元素的所有子元素中唯一的那个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:nth-of-type(n)</code></td><td style="text-align:left;">匹配父元素的第 n 个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:nth-last-of-type(n)</code></td><td style="text-align:left;">匹配父元素的倒数第 n 个子元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:empty</code></td><td style="text-align:left;">匹配没有任何子元素（包括 Text 节点）的元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:checked</code></td><td style="text-align:left;">匹配用户界面上处于选中状态的元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:enabled</code></td><td style="text-align:left;">匹配用户界面上处于可用状态的元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:disabled</code></td><td style="text-align:left;">匹配用户界面上处于禁用状态的元素 E。</td><td style="text-align:left;">✅</td></tr><tr><td style="text-align:left;"><code>E:target</code></td><td style="text-align:left;">匹配相关 URL 指向的 E 元素。</td><td style="text-align:left;">✅</td></tr></tbody></table><br><div class="language-css vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">css</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* li 最后一个元素不添加边框 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:not</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:last-child</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-bottom</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> black</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/* 与第一个 li 相连兄弟 */</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">li</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">:first-child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ~</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;"> li</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  border-left</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">px</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> solid</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> #666</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="伪元素选择符" tabindex="-1">伪元素选择符 <a class="header-anchor" href="#伪元素选择符" aria-label="Permalink to &quot;伪元素选择符&quot;">​</a></h2><p>伪元素和伪类很像，但是伪元素类似于增添一个新的 DOM 节点到 DOM 树中，而不是改变元素的状态。注意了，这里是类似，而不是真的增加一个节点，这也是其被称为伪元素的原因（实质上，元素被创建在文档流外）。</p><table tabindex="0"><thead><tr><th style="text-align:left;">选择符</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;"><code>E:first-letter / E::first-letter</code></td><td style="text-align:left;">设置元素内的第一个字符的样式。</td></tr><tr><td style="text-align:left;"><code>E:first-first-line / E::first-line</code></td><td style="text-align:left;">设置元素内的第一行的样式。</td></tr><tr><td style="text-align:left;"><code>E:before / E::before</code></td><td style="text-align:left;">设置在元素前（依据对象树的逻辑结构）发生的内容。用来和 <code>content</code>属性一起使用。</td></tr><tr><td style="text-align:left;"><code>E:after / E::after</code></td><td style="text-align:left;">设置在元素后（依据对象树的逻辑结构）发生的内容。用来和 <code>content</code>属性一起使用。</td></tr><tr><td style="text-align:left;"><code>E::placeholder</code></td><td style="text-align:left;">设置元素文字占位符的样式。</td></tr><tr><td style="text-align:left;"><code>E::selection</code></td><td style="text-align:left;">设置元素被选择时的颜色。</td></tr></tbody></table><p><strong>注意</strong>：CSS3 将伪元素选择符（Pseudo-Element Selectors）前面的单个冒号（<code>:</code>）修改为双冒号（<code>::</code>）用以区别伪类选择符（Pseudo-Classes Selectors），但以前的写法仍然有效。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://www.w3.org/TR/selectors-3/" target="_blank" rel="noreferrer">📖 W3C Selectors Level 3</a></li><li><a href="https://juejin.im/post/6850037265461149703" target="_blank" rel="noreferrer">这 33 个超级好用的 CSS 选择器，你可能见都没见过</a></li><li><a href="https://juejin.im/post/6844904147414712334" target="_blank" rel="noreferrer">前端布局必须了解的 css 选择器</a></li><li><a href="https://juejin.im/post/6844904181304655886" target="_blank" rel="noreferrer">这些 CSS 伪类，你可能还不知道，可以用起来了！</a></li><li><a href="http://nthmaster.com/" target="_blank" rel="noreferrer">Mastering the :nth-child | CSS3 pseudo classes and :nth-child ranges</a></li></ul>`,22),i=[d];function n(r,o,c,h,g,p){return l(),e("div",null,i)}const x=t(a,[["render",n]]);export{f as __pageData,x as default};
