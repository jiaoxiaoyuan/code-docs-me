import{_ as s,c as i,o as a,a3 as n}from"./chunks/framework.qnZckW2M.js";const g=JSON.parse('{"title":"HTTP 连接","description":"","frontmatter":{"nav":{"title":"计算机网络","order":8},"group":{"title":"HTTP","order":3},"title":"HTTP 连接","order":6},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP 连接.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP 连接.md","lastUpdated":1719742520000}'),e={name:"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/HTTP 连接.md"},l=n(`<h1 id="http-连接" tabindex="-1">HTTP 连接 <a class="header-anchor" href="#http-连接" aria-label="Permalink to &quot;HTTP 连接&quot;">​</a></h1><p>HTTP 连接是 HTTP 报文传输的关键通道。</p><h2 id="持久连接" tabindex="-1">持久连接 <a class="header-anchor" href="#持久连接" aria-label="Permalink to &quot;持久连接&quot;">​</a></h2><p>持久连接（Persistent Connection）</p><p>HTTP 协议采用 <strong>请求-应答</strong> 模式：</p><ul><li>普通模式：每个请求/应答客户和服务器都要新建一个连接，完成之后立即断开连接</li><li>Keep-Alive 模式：该功能使客户端到服务器端的连接持续有效，当出现对服务器的后继请求时，Keep-Alive 功能避免了建立或者重新建立连接</li></ul><p>在 HTTP/1.0 版本中，如果客户端浏览器支持 Keep-Alive ，那么就在 HTTP 请求头中添加一个字段 <code>Connection: Keep-Alive</code>，当服务器收到附带有 <code>Connection: Keep-Alive</code> 的请求时，它也会在响应头中添加一个同样的字段来使用 <code>Keep-Alive</code> 。这样一来，客户端和服务器之间的 HTTP 连接就会被保持，不会断开（超过 <code>Keep-Alive</code> 规定的时间，意外断电等情况除外），当客户端发送另外一个请求时，就使用这条已经建立的连接。</p><p>在 HTTP/1.1 版本中，默认情况下所有连接都被保持，如果加入 <code>Connection: close</code> 才关闭。目前大部分浏览器都使用 HTTP 1.1 协议，也就是说默认都会发起 Keep-Alive 的连接请求了，所以是否能完成一个完整的 Keep-Alive 连接就看服务器设置情况。</p><p>注意事项：</p><ul><li>HTTP Keep-Alive 简单来说就是保持当前的 TCP 连接，避免了重新建立连接</li><li>HTTP 长连接不可能一直保持，例如 <code>Keep-Alive: timeout=5, max=100</code>，表示这个 TCP 通道可以保持 5 秒，且该长连接最多接收 100 次请求就断开</li><li>HTTP 是无状态协议，意味着每个请求都是独立的，Keep-Alive 没能改变这个结果</li></ul><blockquote><p>❓ 使用长连接后，客户端和服务端如何知道本次传输结束呢？</p></blockquote><ol><li>判断传输数据是否达到了 <code>Content-Length</code> 指示的大小</li><li>动态生成的文件采用分块传输的方式传输（<code>Transfer-Encoding: chunked</code>），这时候就要根据 <code>chunked</code> 编码来判断，<code>chunked</code> 编码的数据在最后有一个空 <code>chunked</code> 块，表明本次传输数据结束</li></ol><h2 id="传输编码" tabindex="-1">传输编码 <a class="header-anchor" href="#传输编码" aria-label="Permalink to &quot;传输编码&quot;">​</a></h2><p>传输编码在 HTTP 的报文中，使用 <code>Transfer-Encoding</code> 首部字段进行标记，它就是指明当前使用的传输编码。</p><p><code>Transfer-Encoding</code> 会改变报文的格式和传输的方式，使用它不但不会减少内容传输的大小，甚至还有可能会使传输变大，看似是一个不环保的做法，但是其实是为了解决某些特殊问题。</p><p>简单来说，传输编码必须配合持久连接使用，为了持久连接中，将数据分块传输，并标记传输结束而设计的。</p><h2 id="分块编码传输" tabindex="-1">分块编码传输 <a class="header-anchor" href="#分块编码传输" aria-label="Permalink to &quot;分块编码传输&quot;">​</a></h2><p><code>Transfer-Encoding</code> 在 HTTP/1.1 协议里，就只有 <code>chunked</code> 这个参数，标识当前为分块编码传输。</p><p>分块传输的规则：</p><ol><li>每个分块包含一个十六进制的数据长度值和真实数据</li><li>数据长度值独占一行，和真实数据通过 CRLF（\\r\\n）分割</li><li>数据长度值，不计算真实数据末尾的 CRLF，只计算当前传输块的数据长度</li><li>最后通过一个数据长度值为 0 的分块，来标记当前内容实体传输结束</li></ol><h3 id="不定长包体实现" tabindex="-1">不定长包体实现 <a class="header-anchor" href="#不定长包体实现" aria-label="Permalink to &quot;不定长包体实现&quot;">​</a></h3><p>分块传输编码 Chunked Transfer Encoding</p><div class="language-http vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">http</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Transfer-Encoding</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> chunked</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>表示分块传输数据，设置这个字段后会自动产生两个效果：</p><ul><li><code>Content-Length</code> 首部字段会被忽略</li><li>基于长连接持续推送动态内容</li></ul><p>我们以 Node.js 模拟分块传输：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> http</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> server</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> http.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">createServer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">req</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (req.url </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">===</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;/&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;text/html; charset=utf8&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Content-Length&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setHeader</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Transfer-Encoding&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;chunked&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello world!&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;第一次传输&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      res.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">write</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;第二次传输&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">server.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">listen</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8010</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;成功启动&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="分块编码的拖挂" tabindex="-1">分块编码的拖挂 <a class="header-anchor" href="#分块编码的拖挂" aria-label="Permalink to &quot;分块编码的拖挂&quot;">​</a></h3><p>当我们使用 <code>chunked</code> 进行分块编码传输的时候，传输结束之后，还有机会在分块报文的末尾，再追加一段数据，此数据称为拖挂（Trailer）。</p><p>拖挂的数据，可以是服务端在末尾需要传递的数据，客户端其实是可以忽略并丢弃拖挂的内容的，这就需要双方协商好传输的内容了。</p><p>在拖挂中可以包含附带的首部字段，除了 <code>Transfer-Encoding</code>、<code>Trailer</code> 以及 <code>Content-Length</code> 首部之外，其他 HTTP 首部都可以作为拖挂发送。</p><h3 id="内容编码和传输编码结合" tabindex="-1">内容编码和传输编码结合 <a class="header-anchor" href="#内容编码和传输编码结合" aria-label="Permalink to &quot;内容编码和传输编码结合&quot;">​</a></h3><p>内容编码和传输编码一般都是配合使用。我们会先使用内容编码，将内容实体进行压缩，然后通过传输编码分块发送出去。客户端接收到分块的数据，再将数据进行重新整合，还原成最初的数据。</p><h2 id="管线化连接" tabindex="-1">管线化连接 <a class="header-anchor" href="#管线化连接" aria-label="Permalink to &quot;管线化连接&quot;">​</a></h2><p>默认情况下 HTTP 协议中每个传输层连接只能承载一个 HTTP 请求和响应，浏览器会在收到上个请求的响应后，再发送下个请求。</p><p>在使用持久连接的情况下，某个连接上消息传递类似于 <code>请求1 -&gt; 响应1 -&gt; 请求2 -&gt; 响应2 -&gt; 请求3 -&gt; 响应3</code>.</p><p>HTTP Pipelining（管线化）是将多个 HTTP 请求整批提交的技术，在传送过程中不需等待服务端的应答。使用 HTTP 管线化后，某个连接上的消息变成类似这样，<code>请求1 -&gt; 请求2 -&gt; 请求3 -&gt; 响应1 -&gt; 响应2 -&gt; 响应3</code>。</p><p>注意事项：</p><ul><li>管线化机制通过 <strong>持久连接</strong>（Persistent Connection）完成，仅 HTTP/1.1 支持此技术</li><li>只有 GET 和 HEAD 请求可以进行管线化，而 POST 则有所限制</li><li>初次创建连接时不应启动管线机制，因为服务器不一定支持 HTTP/1.1 版本的协议</li><li>管线化不会影响响应到来的顺序</li><li>HTTP/1.1 要求服务器端支持管线化，但并不要求服务器端也对响应进行管线化处理，只要要求对于管线化的请求不失败即可</li><li>由于上面提到的服务器端问题，开启管线化很可能并不会带来大幅度的性能提升，而且很多服务器端和代理程序对管线化的支持并不好，因此现代浏览器如 Chrome 和 Firefox 默认并未开启管线化支持</li></ul><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://juejin.im/post/6844904100035821575" target="_blank" rel="noreferrer">📝 HTTP 灵魂之问，巩固你的 HTTP 知识体系</a></li><li><a href="https://www.cnblogs.com/cswuyg/p/3653263.html" target="_blank" rel="noreferrer">📝 HTTP 的长连接和短连接</a></li><li><a href="https://juejin.im/post/6844903635881558024" target="_blank" rel="noreferrer">📝 HTTP 传输编码增加了传输量，只为解决这个问题</a></li></ul>`,41),t=[l];function p(h,k,r,d,E,o){return a(),i("div",null,t)}const y=s(e,[["render",p]]);export{g as __pageData,y as default};
