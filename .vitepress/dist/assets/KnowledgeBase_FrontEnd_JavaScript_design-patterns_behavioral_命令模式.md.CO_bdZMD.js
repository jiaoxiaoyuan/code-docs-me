import{_ as t,c as e,o as a,a3 as l}from"./chunks/framework.qnZckW2M.js";const p=JSON.parse('{"title":"命令模式","description":"","frontmatter":{"nav":{"title":"设计模式","order":10},"group":{"title":"行为型","order":4},"title":"命令模式","order":6},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/命令模式.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/命令模式.md","lastUpdated":1719742520000}'),o={name:"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/命令模式.md"},i=l('<h1 id="命令模式" tabindex="-1">命令模式 <a class="header-anchor" href="#命令模式" aria-label="Permalink to &quot;命令模式&quot;">​</a></h1><p><strong>命令模式（Command Pattern）</strong>：将一个请求封装为一个对象，从而使我们可用不同的请求对客户进行参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。命令模式是一种对象行为型模式，其别名为动作（Action）模式或事务（Transaction）模式。</p><h3 id="模式概述" tabindex="-1">模式概述 <a class="header-anchor" href="#模式概述" aria-label="Permalink to &quot;模式概述&quot;">​</a></h3><ul><li><strong>解决问题</strong>：在软件系统中，行为请求者与行为实现者通常是一种紧耦合的关系，但某些场合，比如需要对行为进行记录、撤销或重做、事务等处理时，这种无法抵御变化的紧耦合的设计就不太合适。</li><li><strong>何时使用</strong>：在某些场合，比如要对行为进行&quot;记录、撤销/重做、事务&quot;等处理，这种无法抵御变化的紧耦合是不合适的。在这种情况下，如何将&quot;行为请求者&quot;与&quot;行为实现者&quot;解耦？将一组行为抽象为对象，可以实现二者之间的松耦合。</li><li><strong>如何解决</strong>：通过调用者调用接受者执行命令，顺序：调用者→接受者→命令。</li><li><strong>核心代码</strong>：定义三个角色：1、received 真正的命令执行对象 2、Command 3、<code>invoker</code> 使用命令对象的入口</li><li><h2 id="应用实例" tabindex="-1"><strong>应用实例</strong>： <a class="header-anchor" href="#应用实例" aria-label="Permalink to &quot;**应用实例**：&quot;">​</a></h2></li><li><strong>优点</strong>： <ul><li>降低耦合度</li><li>新的命令可以很容易添加到系统中去</li></ul></li><li><strong>缺点</strong>： <ul><li>使用命令模式可能会导致某些系统有过多的具体命令类</li></ul></li><li><strong>使用场景</strong>： <ul><li>认为是命令的地方都可以使用命令模式 <ul><li>GUI 中每一个按钮都是一条命令</li><li>模拟 CMD</li></ul></li></ul></li></ul><h3 id="模式结构" tabindex="-1">模式结构 <a class="header-anchor" href="#模式结构" aria-label="Permalink to &quot;模式结构&quot;">​</a></h3><p>职责链模式包含如下角色：</p><ul><li>Command（抽象命令类）：</li><li>ConcreteCommand（具体命令类）：</li><li>Invoker（调用者）：</li><li>Receiver（接收者）：</li><li>Client（客户类）：</li></ul>',7),r=[i];function n(s,d,c,u,_,h){return a(),e("div",null,r)}const m=t(o,[["render",n]]);export{p as __pageData,m as default};
