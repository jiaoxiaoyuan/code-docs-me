import{_ as t,c as l,o as e,a3 as i}from"./chunks/framework.qnZckW2M.js";const u=JSON.parse('{"title":"模版方法模式","description":"","frontmatter":{"nav":{"title":"设计模式","order":10},"group":{"title":"行为型","order":4},"title":"模版方法模式","order":1},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/模版方法模式.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/模版方法模式.md","lastUpdated":1719742520000}'),a={name:"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/模版方法模式.md"},r=i('<h1 id="模版方法模式" tabindex="-1">模版方法模式 <a class="header-anchor" href="#模版方法模式" aria-label="Permalink to &quot;模版方法模式&quot;">​</a></h1><p><strong>模板方法</strong>（TemplateMethod）定义了一个操作中的算法的骨架，而将一些步骤延迟到子类中。模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li><strong>解决问题</strong>：一些方法通用，却在每一个子类都重新写了这一方法</li><li><strong>何时使用</strong>：有一些通用的方法</li><li><strong>如何解决</strong>：将这些通用算法抽象出来</li><li><strong>核心代码</strong>：在抽象类实现，其他步骤在子类实现</li><li><strong>应用实例</strong>： <ul><li>在造房子的时候，地基、走线、水管都一样，只有在建筑的后期才有加壁橱加栅栏等差异</li><li>西游记里面菩萨定好的 81 难，这就是一个顶层的逻辑骨架</li><li>Spring 中对 Hibernate 的支持，将一些已经定好的方法封装起来，比如开启事务、获取 Session、关闭 Session 等，程序员不重复写那些已经规范好的代码，直接丢一个实体就可以保存</li></ul></li><li><strong>优点</strong>： <ul><li>封装不变部分，扩展可变部分</li><li>提取公共代码，便于维护</li><li>行为由父类控制，子类实现</li></ul></li><li><strong>缺点</strong>： <ul><li>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大</li></ul></li><li><strong>使用场景</strong>： <ul><li>有多个子类共有的方法，且逻辑相同</li><li>重要的、复杂的方法，可以考虑作为模板方法</li></ul></li></ul><h2 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h2><p>模板模式包含如下角色：</p><ul><li><p>抽象父类：封装子类的算法框架，包括实现一些公用方法以及封装在子类中所有方法的执行顺序</p></li><li><p>实现子类：通过集成这个抽象类，也继承了整个算法，并且可以选择重写父类的方法 假如我们有许多平行的类，各个类之间有许多相同的行为，也有部分不同的行为。如果各位都定义自己所有的行为，那么会出现很多重复的方法。此时可以将相同的行为搬移到另外一个单一的地方，模板方法模式就是为了解决这个问题。在模板方法模式中，子类中相同的行为被移动到了父类中，而将不同的部分留待子类来实现。</p></li></ul>',7),o=[r];function n(s,d,_,p,c,g){return e(),l("div",null,o)}const m=t(a,[["render",n]]);export{u as __pageData,m as default};
