import{_ as s,c as a,o as i,a3 as t}from"./chunks/framework.qnZckW2M.js";const T=JSON.parse('{"title":"HTTP","description":"","frontmatter":{"nav":{"title":"计算机网络","order":8},"group":{"title":"HTTP","order":3},"title":"HTTP","order":1},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/http.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/http.md","lastUpdated":1719742520000}'),e={name:"KnowledgeBase/FrontEnd/JavaScript/computer-networks/http/http.md"},n=t(`<h1 id="http-超文本传输协议" tabindex="-1">HTTP 超文本传输协议 <a class="header-anchor" href="#http-超文本传输协议" aria-label="Permalink to &quot;HTTP 超文本传输协议&quot;">​</a></h1><p>HTTP 全称是  HyperText Transfer Protocal ，即超文本传输协议。</p><ul><li>HTTP 是 <strong>应用层协议</strong>，当你上网浏览网页的时候，浏览器和 Web 服务器之间就会通过 HTTP 在 Internet 上进行数据的发送和接收。</li><li>HTTP 是一个基于请求/响应模式的、无状态的协议。</li></ul><div class="language-jsx vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> React </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;react&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> img </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;../../assets/http/from-url-request-to-render-dom-tree.png&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">img</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> alt</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Webpack执行流程&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{img} </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">width</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">800</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} /&gt;;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="特点" tabindex="-1">特点 <a class="header-anchor" href="#特点" aria-label="Permalink to &quot;特点&quot;">​</a></h2><p>HTTP 的特点概括如下：</p><ol><li><strong>灵活可扩展</strong>：主要体现在两个方面。一个是语义上的自由，只规定了基本格式，比如空格分隔单词，换行分隔字段，其他的各个部分都没有严格的语法限制。另一个是传输形式的多样性，不仅仅可以传输文本，还能传输图片、视频等任意数据，非常方便。</li><li><strong>可靠传输</strong>：HTTP 基于 TCP/IP，因此把这一特性继承了下来。这属于 TCP 的特性，不具体介绍了。</li><li><strong>请求-应答</strong>：也就是一发一收、有来有回， 当然这个请求方和应答方不单单指客户端和服务器之间，如果某台服务器作为代理来连接后端的服务端，那么这台服务器也会扮演请求方的角色。</li><li><strong>无状态</strong>：这里的状态是指 <strong>通信过程的上下文信息</strong>，而每次 HTTP 请求都是独立、无关的，默认不需要保留状态信息。</li></ol><h2 id="缺点" tabindex="-1">缺点 <a class="header-anchor" href="#缺点" aria-label="Permalink to &quot;缺点&quot;">​</a></h2><h3 id="无状态" tabindex="-1">无状态 <a class="header-anchor" href="#无状态" aria-label="Permalink to &quot;无状态&quot;">​</a></h3><p>所谓的优点和缺点还是要分场景来看的，对于 HTTP 而言，最具争议的地方在于它的 <strong>无状态</strong>。</p><p>在需要长连接的场景中，需要保存大量的上下文信息，以免传输大量重复的信息，那么这时候无状态就是 HTTP 的缺点了。</p><p>但与此同时，另外一些应用仅仅只是为了获取一些数据，不需要保存连接上下文信息，无状态反而减少了网络开销，成为了 HTTP 的优点。</p><h3 id="明文传输" tabindex="-1">明文传输 <a class="header-anchor" href="#明文传输" aria-label="Permalink to &quot;明文传输&quot;">​</a></h3><p>即协议里的报文（主要指的是头部）不使用二进制数据，而是文本形式。</p><p>这当然对于调试提供了便利，但同时也让 HTTP 的报文信息暴露给了外界，给攻击者也提供了便利。<code>WIFI 陷阱</code> 就是利用 HTTP 明文传输的缺点，诱导你连上热点，然后疯狂抓你所有的流量，从而拿到你的敏感信息。</p><h3 id="队头阻塞问题" tabindex="-1">队头阻塞问题 <a class="header-anchor" href="#队头阻塞问题" aria-label="Permalink to &quot;队头阻塞问题&quot;">​</a></h3><p>当 HTTP 开启长连接时，共用一个 TCP 连接，同一时刻只能处理一个请求，那么当前请求耗时过长的情况下，其它的请求只能处于 <strong>阻塞状态</strong>，也就是著名的队头阻塞问题。</p><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><ul><li><a href="https://fetch.spec.whatwg.org/" target="_blank" rel="noreferrer">Fetch Living Standard</a></li><li><a href="https://juejin.im/post/5e76bd516fb9a07cce750746#heading-0" target="_blank" rel="noreferrer">HTTP 灵魂之问，巩固你的 HTTP 知识体系</a></li></ul>`,19),r=[n];function l(h,p,o,k,d,c){return i(),a("div",null,r)}const u=s(e,[["render",l]]);export{T as __pageData,u as default};
