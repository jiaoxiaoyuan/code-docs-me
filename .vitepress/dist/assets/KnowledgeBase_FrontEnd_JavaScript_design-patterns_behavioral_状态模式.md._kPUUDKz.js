import{_ as t,c as e,o as l,a3 as i}from"./chunks/framework.qnZckW2M.js";const p=JSON.parse('{"title":"状态模式","description":"","frontmatter":{"nav":{"title":"设计模式","order":10},"group":{"title":"行为型","order":4},"title":"状态模式","order":3},"headers":[],"relativePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/状态模式.md","filePath":"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/状态模式.md","lastUpdated":1719742520000}'),a={name:"KnowledgeBase/FrontEnd/JavaScript/design-patterns/behavioral/状态模式.md"},r=i('<h1 id="状态模式" tabindex="-1">状态模式 <a class="header-anchor" href="#状态模式" aria-label="Permalink to &quot;状态模式&quot;">​</a></h1><p><strong>状态模式（State Pattern）</strong>：允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。其别名为状态对象（Objects for States），状态模式是一种对象行为型模式。</p><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><ul><li><strong>解决问题</strong>：对象的行为依赖于它的状态（属性），并且可以根据它的状态改变而改变它的相关行为</li><li><strong>何时使用</strong>：代码中包含大量与对象状态有关的条件语句</li><li><strong>如何解决</strong>：将各种具体的状态类抽象出来</li><li><strong>核心代码</strong>：通常命令模式的接口中只有一个方法。而状态模式的接口中有一个或者多个方法。而且，状态模式的实现类的方法，一般返回值，或者是改变实例变量的值。也就是说，状态模式一般和对象的状态有关。实现类的方法有不同的功能，覆盖接口中的方法。状态模式和命令模式一样，也可以用于消除 <code>if...else</code> 等条件选择语句。</li><li><strong>应用实例</strong>： <ul><li>打篮球的时候运动员可以有正常状态、不正常状态和超常状态。</li></ul></li><li><strong>优点</strong>： <ul><li>封装了转换规则</li><li>枚举可能的状态，在枚举状态之前需要确定状态种类</li><li>将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为</li><li>允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块</li><li>可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数</li></ul></li><li><strong>缺点</strong>： <ul><li>状态模式的使用必然会增加系统类和对象的个数。</li><li>状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。</li><li>状态模式对“开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</li></ul></li><li><strong>使用场景</strong>： <ul><li>行为随状态改变而改变的场景</li><li>条件、分支语句的代替者</li></ul></li></ul><h3 id="结构" tabindex="-1">结构 <a class="header-anchor" href="#结构" aria-label="Permalink to &quot;结构&quot;">​</a></h3><p>状态模式包含如下角色：</p><ul><li>Context（环境类）：定义客户端所感兴趣的接口，并且保留一个具体状态类的实例。这个具体状态类的实例给出此环境对象的现有状态。</li><li>State（抽象状态类）：定义一个接口，用以封装环境（Context）对象的一个特定的状态所对应的行为。</li><li>ConcreteState（具体状态类）：每一个具体状态类都实现了环境（Context）的一个状态所对应的行为。</li></ul>',7),o=[r];function n(s,d,c,_,g,h){return l(),e("div",null,o)}const f=t(a,[["render",n]]);export{p as __pageData,f as default};
